{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\n\nvar htmlConfig = {\n  treeType: \"dom\",\n  readValueFromInstance: function readValueFromInstance(domElement, key) {\n    if (isTransformProp(key)) {\n      var defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType[\"default\"] || 0 : 0;\n    } else {\n      var computedStyle = getComputedStyle(domElement);\n      return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n    }\n  },\n  sortNodePosition: function sortNodePosition(a, b) {\n    /**\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\n     * to true if b preceeds a.\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  },\n  getBaseTarget: function getBaseTarget(props, key) {\n    var _a;\n\n    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n  },\n  measureViewportBox: function measureViewportBox(element, _a) {\n    var transformPagePoint = _a.transformPagePoint;\n    return getBoundingBox(element, transformPagePoint);\n  },\n\n  /**\n   * Reset the transform on the current Element. This is called as part\n   * of a batched process across the entire layout tree. To remove this write\n   * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n   * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n   * works\n   */\n  resetTransform: function resetTransform(element, domElement, props) {\n    var transformTemplate = props.transformTemplate;\n    domElement.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\"; // Ensure that whatever happens next, we restore our transform on the next frame\n\n    element.scheduleRender();\n  },\n  restoreTransform: function restoreTransform(instance, mutableState) {\n    instance.style.transform = mutableState.style.transform;\n  },\n  removeValueFromRenderState: function removeValueFromRenderState(key, _a) {\n    var vars = _a.vars,\n        style = _a.style;\n    delete vars[key];\n    delete style[key];\n  },\n\n  /**\n   * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n   * can be animated by Motion.\n   */\n  makeTargetAnimatable: function makeTargetAnimatable(element, _a, _b, isMounted) {\n    var transformValues = _b.transformValues;\n\n    if (isMounted === void 0) {\n      isMounted = true;\n    }\n\n    var transition = _a.transition,\n        transitionEnd = _a.transitionEnd,\n        target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n\n    var origin = getOrigin(target, transition || {}, element);\n    /**\n     * If Framer has provided a function to convert `Color` etc value types, convert them\n     */\n\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n\n    if (isMounted) {\n      checkTargetForNewValues(element, target, origin);\n      var parsed = parseDomVariant(element, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n\n    return __assign({\n      transition: transition,\n      transitionEnd: transitionEnd\n    }, target);\n  },\n  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n  build: function build(element, renderState, latestValues, projection, layoutState, options, props) {\n    if (element.isVisible !== undefined) {\n      renderState.style.visibility = element.isVisible ? \"visible\" : \"hidden\";\n    }\n\n    var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n    buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform ? buildLayoutProjectionTransformOrigin : undefined);\n  },\n  render: renderHTML\n};\nvar htmlVisualElement = visualElement(htmlConfig);\nexport { getComputedStyle, htmlConfig, htmlVisualElement };","map":{"version":3,"sources":["/home/adrian/programacion/adrian/bodaWebsite/source/node_modules/framer-motion/dist/es/render/html/visual-element.js"],"names":["__rest","__assign","visualElement","getOrigin","checkTargetForNewValues","getBoundingBox","buildHTMLStyles","isCSSVariable","parseDomVariant","isTransformProp","scrapeMotionValuesFromProps","renderHTML","getDefaultValueType","buildLayoutProjectionTransformOrigin","buildLayoutProjectionTransform","getComputedStyle","element","window","htmlConfig","treeType","readValueFromInstance","domElement","key","defaultType","computedStyle","getPropertyValue","sortNodePosition","a","b","compareDocumentPosition","getBaseTarget","props","_a","style","measureViewportBox","transformPagePoint","resetTransform","transformTemplate","transform","scheduleRender","restoreTransform","instance","mutableState","removeValueFromRenderState","vars","makeTargetAnimatable","_b","isMounted","transformValues","transition","transitionEnd","target","origin","parsed","build","renderState","latestValues","projection","layoutState","options","isVisible","undefined","visibility","isProjectionTranform","isEnabled","isHydrated","render","htmlVisualElement"],"mappings":"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","sourcesContent":["import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return getBoundingBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition,\n            transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n"]},"metadata":{},"sourceType":"module"}